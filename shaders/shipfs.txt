in vec2 v_texCoord;
in vec3 v_normal;
in vec3 v_worldPos;
layout(binding=0) uniform sampler2DArray tex;
out vec4 color;

#define A2 1
#define A1 0
#define A0 0

void main(){
    
	color = texture(tex,vec3(v_texCoord,0));

	color.a = color.a * alphaFactor;

	vec3 N = normalize(v_normal);
	vec3 totalDiffuseColor = vec3(0.0);
	vec3 totalSpecularColor = vec3(0.0);





	for(int i=0;i<MAX_LIGHTS;++i){
	    vec3 L = normalize(lightPositions[i].xyz - lightPositions[i].w * v_worldPos);
	    float d = distance(lightPositions[i].xyz, v_worldPos);
        float f = 1/(d*(A2*d + A1) + A0);
	    float dp = max(0.0, dot(L,N));
	    f = min(1.0,f);
	    dp = f*dp;

	   	totalDiffuseColor += dp * lightColors[i].rgb;

	   	vec3 incoming = normalize(v_worldPos - lightPositions[i].xyz);
	    vec3 V = normalize(eyePos - v_worldPos);
        vec3 R = reflect(incoming,N);
	    float sp = dot(V,R);
	    sp = max(0.0, sp);
	    sp = sp * sign(dp);
        sp = pow(sp, shininess);
        totalSpecularColor += sp * lightColors[i].rgb;
	}

    vec3 ambient = vec3(0.8,0.8,0.8);

    color.rgb = color.rgb *ambient + color.rgb * diffuse * totalDiffuseColor + color.rgb * specular * totalSpecularColor;

}
